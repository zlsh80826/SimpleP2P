// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: port.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "port.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace port {

namespace {

const ::google::protobuf::Descriptor* Port_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Port_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_port_2eproto() {
  protobuf_AddDesc_port_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "port.proto");
  GOOGLE_CHECK(file != NULL);
  Port_descriptor_ = file->message_type(0);
  static const int Port_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Port, port_num_),
  };
  Port_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Port_descriptor_,
      Port::default_instance_,
      Port_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Port, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Port, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Port));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_port_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Port_descriptor_, &Port::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_port_2eproto() {
  delete Port::default_instance_;
  delete Port_reflection_;
}

void protobuf_AddDesc_port_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nport.proto\022\004port\"\030\n\004Port\022\020\n\010port_num\030\001"
    " \002(\005", 44);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "port.proto", &protobuf_RegisterTypes);
  Port::default_instance_ = new Port();
  Port::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_port_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_port_2eproto {
  StaticDescriptorInitializer_port_2eproto() {
    protobuf_AddDesc_port_2eproto();
  }
} static_descriptor_initializer_port_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Port::kPortNumFieldNumber;
#endif  // !_MSC_VER

Port::Port()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:port.Port)
}

void Port::InitAsDefaultInstance() {
}

Port::Port(const Port& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:port.Port)
}

void Port::SharedCtor() {
  _cached_size_ = 0;
  port_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Port::~Port() {
  // @@protoc_insertion_point(destructor:port.Port)
  SharedDtor();
}

void Port::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Port::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Port::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Port_descriptor_;
}

const Port& Port::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_port_2eproto();
  return *default_instance_;
}

Port* Port::default_instance_ = NULL;

Port* Port::New() const {
  return new Port;
}

void Port::Clear() {
  port_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Port::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:port.Port)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 port_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_num_)));
          set_has_port_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:port.Port)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:port.Port)
  return false;
#undef DO_
}

void Port::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:port.Port)
  // required int32 port_num = 1;
  if (has_port_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->port_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:port.Port)
}

::google::protobuf::uint8* Port::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:port.Port)
  // required int32 port_num = 1;
  if (has_port_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->port_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:port.Port)
  return target;
}

int Port::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 port_num = 1;
    if (has_port_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Port::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Port* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Port*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Port::MergeFrom(const Port& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port_num()) {
      set_port_num(from.port_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Port::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Port::CopyFrom(const Port& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Port::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Port::Swap(Port* other) {
  if (other != this) {
    std::swap(port_num_, other->port_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Port::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Port_descriptor_;
  metadata.reflection = Port_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace port

// @@protoc_insertion_point(global_scope)
