// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_login.proto

#ifndef PROTOBUF_data_5flogin_2eproto__INCLUDED
#define PROTOBUF_data_5flogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_data_5flogin_2eproto();
void protobuf_AssignDesc_data_5flogin_2eproto();
void protobuf_ShutdownFile_data_5flogin_2eproto();

class LoginData;
class Data;

// ===================================================================

class LoginData : public ::google::protobuf::Message {
 public:
  LoginData();
  virtual ~LoginData();

  LoginData(const LoginData& from);

  inline LoginData& operator=(const LoginData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginData& default_instance();

  void Swap(LoginData* other);

  // implements Message ----------------------------------------------

  LoginData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginData& from);
  void MergeFrom(const LoginData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Data.Data loginData = 1;
  inline int logindata_size() const;
  inline void clear_logindata();
  static const int kLoginDataFieldNumber = 1;
  inline const ::Data::Data& logindata(int index) const;
  inline ::Data::Data* mutable_logindata(int index);
  inline ::Data::Data* add_logindata();
  inline const ::google::protobuf::RepeatedPtrField< ::Data::Data >&
      logindata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Data::Data >*
      mutable_logindata();

  // @@protoc_insertion_point(class_scope:Data.LoginData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Data::Data > logindata_;
  friend void  protobuf_AddDesc_data_5flogin_2eproto();
  friend void protobuf_AssignDesc_data_5flogin_2eproto();
  friend void protobuf_ShutdownFile_data_5flogin_2eproto();

  void InitAsDefaultInstance();
  static LoginData* default_instance_;
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  void Swap(Data* other);

  // implements Message ----------------------------------------------

  Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional bool online = 3 [default = false];
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 3;
  inline bool online() const;
  inline void set_online(bool value);

  // optional string ip = 4 [default = ""];
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 5 [default = 8888];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Data.Data)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* password_;
  ::std::string* ip_;
  bool online_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_data_5flogin_2eproto();
  friend void protobuf_AssignDesc_data_5flogin_2eproto();
  friend void protobuf_ShutdownFile_data_5flogin_2eproto();

  void InitAsDefaultInstance();
  static Data* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginData

// repeated .Data.Data loginData = 1;
inline int LoginData::logindata_size() const {
  return logindata_.size();
}
inline void LoginData::clear_logindata() {
  logindata_.Clear();
}
inline const ::Data::Data& LoginData::logindata(int index) const {
  // @@protoc_insertion_point(field_get:Data.LoginData.loginData)
  return logindata_.Get(index);
}
inline ::Data::Data* LoginData::mutable_logindata(int index) {
  // @@protoc_insertion_point(field_mutable:Data.LoginData.loginData)
  return logindata_.Mutable(index);
}
inline ::Data::Data* LoginData::add_logindata() {
  // @@protoc_insertion_point(field_add:Data.LoginData.loginData)
  return logindata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Data::Data >&
LoginData::logindata() const {
  // @@protoc_insertion_point(field_list:Data.LoginData.loginData)
  return logindata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Data::Data >*
LoginData::mutable_logindata() {
  // @@protoc_insertion_point(field_mutable_list:Data.LoginData.loginData)
  return &logindata_;
}

// -------------------------------------------------------------------

// Data

// required string id = 1;
inline bool Data::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Data::id() const {
  // @@protoc_insertion_point(field_get:Data.Data.id)
  return *id_;
}
inline void Data::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:Data.Data.id)
}
inline void Data::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Data.Data.id)
}
inline void Data::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Data.Data.id)
}
inline ::std::string* Data::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Data.Data.id)
  return id_;
}
inline ::std::string* Data::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Data::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Data.Data.id)
}

// required string password = 2;
inline bool Data::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Data::password() const {
  // @@protoc_insertion_point(field_get:Data.Data.password)
  return *password_;
}
inline void Data::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:Data.Data.password)
}
inline void Data::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:Data.Data.password)
}
inline void Data::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Data.Data.password)
}
inline ::std::string* Data::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Data.Data.password)
  return password_;
}
inline ::std::string* Data::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Data::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Data.Data.password)
}

// optional bool online = 3 [default = false];
inline bool Data::has_online() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Data::set_has_online() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Data::clear_has_online() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Data::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool Data::online() const {
  // @@protoc_insertion_point(field_get:Data.Data.online)
  return online_;
}
inline void Data::set_online(bool value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:Data.Data.online)
}

// optional string ip = 4 [default = ""];
inline bool Data::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Data::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Data::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Data::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Data::ip() const {
  // @@protoc_insertion_point(field_get:Data.Data.ip)
  return *ip_;
}
inline void Data::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:Data.Data.ip)
}
inline void Data::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:Data.Data.ip)
}
inline void Data::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Data.Data.ip)
}
inline ::std::string* Data::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Data.Data.ip)
  return ip_;
}
inline ::std::string* Data::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Data::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Data.Data.ip)
}

// optional int32 port = 5 [default = 8888];
inline bool Data::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Data::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Data::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Data::clear_port() {
  port_ = 8888;
  clear_has_port();
}
inline ::google::protobuf::int32 Data::port() const {
  // @@protoc_insertion_point(field_get:Data.Data.port)
  return port_;
}
inline void Data::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:Data.Data.port)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Data

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_5flogin_2eproto__INCLUDED
